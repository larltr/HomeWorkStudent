import json
import os

FILENAME = "students.json"  # будем сохранять список студентов.

# Функция для загрузки списка студентов из файла.
def load_students():
    if os.path.exists(FILENAME):  # Проверяем, существует ли файл students.json.
        with open(FILENAME, "r", encoding="utf-8") as f:  # Открываем файл в режиме чтения.
            return json.load(f)  # Загружаем данные из файла в формате JSON и возвращаем как список.
    return []  # Если файла нет, возвращаем пустой список.


# Функция для сохранения списка студентов в файл.
def save_students(students):
    with open(FILENAME, "w", encoding="utf-8") as f:  # Открываем файл в режиме записи.
        json.dump(students, f, ensure_ascii=False,
                  indent=4)  # Сохраняем список студентов в формате JSON с отступами для читаемости.
    print("Данные сохранены.")  # Печатаем сообщение о том, что данные сохранены.


# Функция для добавления нового студента в список.
def add_student(students):
    if len(students) >= 10:  # Проверяем, есть ли уже 10 студентов в списке.
        print("Максимум 10 студентов в списке!")  # Если студентов уже 10, выводим сообщение.
        return students  # Возвращаем текущий список без изменений.

    name = input(
        "Введите имя студента: ").strip().capitalize()  # Запрашиваем имя студента, удаляем лишние пробелы и делаем первую букву заглавной.

    if len(name) == 0:  # Если имя пустое.
        print("Имя не может быть пустым!")  # Выводим сообщение об ошибке.
    elif len(name) > 15:  # Если имя длиннее 15 символов.
        print("Имя слишком длинное (максимум 15 символов)!")  # Выводим сообщение об ошибке.
    elif name in students:  # Если студент с таким именем уже есть в списке.
        print("Такой студент уже есть в списке!")  # Выводим сообщение об ошибке.
    else:
        students.append(name)  # Если ошибок нет, добавляем студента в список.
        print(f"Студент {name} успешно добавлен!")  # Печатаем сообщение об успешном добавлении.

    return students  # Возвращаем обновленный список студентов.


# Функция для отображения списка студентов.
def show_students(students):
    if not students:  # Если список студентов пустой.
        print("Список студентов пуст.")  # Выводим сообщение, что список пуст.
    else:
        print("Текущий список студентов:")  # Выводим заголовок.
        for i, s in enumerate(students, start=1):  # Проходим по списку студентов с нумерацией, начиная с 1.
            print(f"{i}. {s}")  # Выводим номер и имя каждого студента.


# Основная функция программы.
def main():
    students = load_students()  # Загружаем список студентов из файла при запуске программы.

    while True:  # Бесконечный цикл, который позволяет пользователю работать с меню программы.
        print("\nМеню:")  # Выводим меню.
        print("1) Добавить студента")  # Опция для добавления студента.
        print("2) Показать всех студентов")  # Опция для отображения списка студентов.
        print("0) Выход")  # Опция для выхода из программы.

        command = input("\nВыберите команду: ").strip()  # Запрашиваем у пользователя команду и удаляем лишние пробелы.

        if command == "1":  # Если пользователь выбрал добавление студента.
            students = add_student(students)  # Добавляем студента и обновляем список.
        elif command == "2":  # Если пользователь выбрал просмотр списка студентов.
            show_students(students)  # Показываем текущий список студентов.
        elif command == "0":  # Если пользователь выбрал выход из программы.
            save_students(students)  # Сохраняем список студентов в файл.
            print("Программа завершена.")  # Выводим сообщение о завершении программы.
            break  # Выход из цикла, программа завершена.
        else:
            print("Неизвестная команда. Попробуйте снова.")  # Если введена неизвестная команда, выводим ошибку.


# Если данный файл выполняется как основная программа, то вызываем функцию main.
if __name__ == "__main__":
    main()
